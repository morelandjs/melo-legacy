#!/usr/bin/env python2

import argparse

import matplotlib.pyplot as plt
import numpy as np
from itertools import product
from scipy.stats import skellam

import melo
import nfldb
import nflgame


# figure size
aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8.0, 9.25, 10.0
offblack = '#262626'

# figure style
plt.style.use('fivethirtyeight')

plt.rcParams.update({
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .9,
    'lines.markersize': 3,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'xtick.major.width': .5,
    'ytick.major.width': .5,
    'xtick.minor.width': .5,
    'ytick.minor.width': .5,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.minor.size': 1.3,
    'ytick.minor.size': 1.3,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 3,
})

# run elo ratings simulation
rating = melo.Rating(database='elo.db')

plot_functions = {}

def plot(f):
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()

    plot_functions[f.__name__] = wrapper

    return wrapper

def finish(despine=True, remove_ticks=False, pad=0.1,
        h_pad=None, w_pad=None, rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)

@plot
def spread_frequency():
    """
    Frequency of NFL spreads (margin of victory) since 2009

    """
    spreads = rating.spreads()
    bins = np.arange(-0.5, 41.5)

    plt.hist(spreads, bins=bins)
    plt.xlabel('Spread [pts]')
    plt.ylabel('Counts [games]')
    plt.title('Frequency of NFL spreads')
    plt.annotate(r'2009-present', xy=(.9, .9),
            xycoords='axes fraction', ha='right', va='top')
    finish()

@plot
def weekly_spreads(year=2017, week=1):
    """
    Calculate the 50-50 betting point-spread for each team.

    """
    fig, axes = plt.subplots(
            nrows=4, ncols=4,
            sharex=True, sharey=True,
            figsize=(textwidth, textwidth),
            )

    nflgame_sched = nflgame.live._games_in_week(year, week)
    for game, ax in zip(nflgame_sched, axes.flat):

        home = game['home']
        away = game['away']

        spread, prob = rating.cdf(home, away, year, week)
        ax.step(spread, prob)

        if ax.is_first_col():
            ax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])
            ax.set_ylim(0, 1)

        if ax.is_last_row():
            xticks = [-20, -10, 0, 10, 20]
            ax.set_xticks(xticks)
            ax.set_xlim(-20, 20)

        for axis in (ax.xaxis.get_major_ticks(),
                ax.yaxis.get_major_ticks()):
            for tic in axis:
                tic.tick1On = tic.tick2On = False

        for loc in 'bottom', 'left':
            ax.spines[loc].set_color(offblack)
            ax.spines[loc].set_linewidth(1)

        for loc in 'top', 'right':
            ax.spines[loc].set_color(None)

        ax.annotate('{}@{}'.format(away, home), xy=(0.98,0.98),
                ha='right', va='top', xycoords='axes fraction',
                zorder=2, color=offblack)

        median, prob = rating.predict_spread(home, away, year, week)
        ax.axvline(median, 0, prob, color=plt.cm.Oranges(.6),
                zorder=1, lw=1, alpha=0.8)

        winner = home if median > 0 else away
        ax.annotate('{} {}'.format(winner, -abs(median)), xy=(0.02,0.02),
                ha='left', va='bottom', xycoords='axes fraction',
                zorder=2, color=offblack)

    fig.text(0.5, 0.0, r'home $-$ away [points]',
            ha='center', va='bottom')
    fig.text(0.01, 0.5, r'Prob(home $-$ away > x)',
            ha='center', va='center', rotation=90)
    fig.text(0.5, 0.99, r'Week {}, {}'.format(week, year),
            ha='center', va='center', fontsize=texnormal)
    fig.tight_layout(w_pad=0.4, h_pad=0.4, pad=2) 

@plot
def weekly_ratings(year=2017, week=1):
    """
    Calculate the ELO ratings for each handicap

    """
    fig, axes = plt.subplots(
            nrows=4, ncols=4,
            sharex=True, sharey=True,
            figsize=(textwidth, textwidth),
            )

    nflgame_sched = nflgame.live._games_in_week(year, week)
    for game, ax in zip(nflgame_sched, axes.flat):

        home = game['home']
        away = game['away']
        teams = home, away

        spread = np.arange(-40, 41)

        for team in teams:
            elo = [rating.query_elo(team, hcap, year, week)
                    for hcap in spread]
            ax.scatter(spread, elo)

        if ax.is_last_row():
            xticks = [-40, -20, 0, 20, 40]
            ax.set_xticks(xticks)
            ax.set_xlim(-40, 40)

        for axis in (ax.xaxis.get_major_ticks(),
                ax.yaxis.get_major_ticks()):
            for tic in axis:
                tic.tick1On = tic.tick2On = False

        for loc in 'bottom', 'left':
            ax.spines[loc].set_color(offblack)
            ax.spines[loc].set_linewidth(1)

        for loc in 'top', 'right':
            ax.spines[loc].set_color(None)

        ax.annotate('{}@{}'.format(away, home), xy=(0.98,0.98),
                ha='right', va='top', xycoords='axes fraction',
                zorder=2, color=offblack)

    fig.text(0.5, 0.0, r'Handicap [points]',
            ha='center', va='bottom')
    fig.text(0.01, 0.5, r'Elo rating',
            ha='center', va='center', rotation=90)
    fig.text(0.5, 0.99, r'Week {}, {}'.format(week, year),
            ha='center', va='center', fontsize=texnormal)
    fig.tight_layout(w_pad=0.4, h_pad=0.4, pad=2) 

@plot
def win_rate(nsample=10**4):
    rating = melo.Rating(kfactor=2, database='elo.db')
    spreads = skellam.rvs(14, 7, size=nsample)

    # loop over different handicap margins
    for hcap in np.arange(0, 14, 2):

        # home team true win rate
        win_rate = np.heaviside(spreads - hcap, 0).mean()

        # initialize elo ratings
        arg = max(1/win_rate - 1, 1e-6)
        elo_diff = -200*np.log10(arg)
        home_elo = 1500. + elo_diff
        away_elo = 1500. - elo_diff
        win_prob = []

        # simulate a ficticious season
        for spread in spreads:
            elo_diff = home_elo - away_elo
            bounty = rating.elo_change(elo_diff, spread, hcap)
            home_elo += bounty
            away_elo -= bounty
            pwin = rating.win_prob(home_elo - away_elo)
            win_prob.append(pwin)

        # plot model
        blue, orange = (plt.cm.Blues(.6), plt.cm.Oranges(.6))
        plt.step(range(nsample), win_prob, color=blue)
        plt.axhline(win_rate, color=orange, lw=1.5, dashes=(4,2))
        plt.annotate('hcap: {} pts'.format(hcap), xycoords='data',
                xy=(nsample, win_rate+0.02), ha='right', va='bottom',
                color=offblack)

    # figure labels
    plt.xlabel("Iteration [Games]")
    plt.ylabel("Win %")
    plt.ylim(0, 1)
    plt.title("Handicapped win probability")
    finish()

def elo_history(team, handicap):
    """
    Plot the ELO rating history for a given team with a 
    specified margin of victory handicap.

    """
    # convert (year, week) into a single date number
    def date(game):
        return game.season_year + game.week/float(17.)

    # query database for game dates
    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular', team=team)
    games = sorted(q.as_games(), key=lambda g: date(g))

    # unpack historical elo ratings
    rtg_history = [
            (date(game),
            rating.query_elo(
                team,
                handicap,
                game.season_year,
                game.week
                ))
            for game in games
            ]

    # return "handicapped" elo rating history
    rtg_hcap = [(date, rtg) for date, rtg in rtg_history]
    return rtg_hcap

@plot
def team_history():
    fig, axes = plt.subplots(
            nrows=8, ncols=4,
            sharex=True, sharey=True,
            figsize=(textwidth, 2*textwidth)
            )

    # query database for game dates
    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular')
    teams = set(g.home_team for g in q.as_games())

    for ax, team in zip(axes.flat, sorted(teams)):
        for hcap in np.linspace(0, 28, 5):
            rtg_hcap = elo_history(team, hcap)
            color = plt.cm.coolwarm(hcap/40.)
            ax.step(*zip(*rtg_hcap), label=team, color=color)

            if ax.is_last_row():
                ax.set_xlabel("Year")
                ax.set_xticks([2010, 2012, 2014, 2016])
            if ax.is_first_col():
                ax.set_ylabel("ELO rating")

            title = ax.set_title(team, va='top')
            title.set_position([.5, .95])

    finish()

@plot
def model_error():
    # create figure object
    fig, (ax1, ax2) = plt.subplots(
            ncols=2, sharey=True,
            figsize=(textwidth, aspect*columnwidth)
            )

    # game spreads
    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular')
    spreads = [game.home_score - game.away_score
            for game in q.as_games()]

    # model residuals
    residuals = rating.model_accuracy()
    neg_residuals = [-r for r in residuals]

    # compare model predictions and score spread
    bins = np.arange(-40.5, 41.5)
    ax1.hist(spreads, bins=bins, histtype='step',
            normed=True, label='spreads')
    ax1.hist(residuals, bins=bins, histtype='step',
            normed=True, label='model')

    ax1.set_xlabel("observed - predicted [points]")
    ax1.set_ylabel("Counts")
    ax1.set_title("Model accuracy")
    ax1.legend()

    # compare model prediction with reflection (home vs away)
    bins = np.arange(-40, 41, 2)
    ax2.hist(residuals, bins=bins, histtype='step',
            normed=True, label='model')
    ax2.hist(neg_residuals, bins=bins, histtype='step',
            normed=True, label='model reflected')

    ax2.set_xlabel("observed - predicted [points]")
    ax2.set_title("Home-field error")
    ax2.legend()

    # figure properties
    finish()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.png'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
