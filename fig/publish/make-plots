#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import argparse
import csv
import re
from pathlib import Path

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
from matplotlib import ticker
from scipy.stats import skellam, probplot
from scipy.ndimage.filters import gaussian_filter1d

import melo
import nfldb


# figure size
aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textheight = 672/resolution
textiny, texsmall, texnormal = 8.0, 9.25, 10.0
offblack = 'black'
blue = '#1b6394'
orange = '#F1A107'

plt.rcParams.update({
    'font.family': 'serif',
    'font.serif': ['CMU Serif'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'serif',
    'mathtext.it': 'serif:italic',
    'mathtext.cal': 'serif',
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .9,
    'lines.markersize': 3,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'xtick.major.width': .5,
    'ytick.major.width': .5,
    'xtick.minor.width': .5,
    'ytick.minor.width': .5,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.minor.size': 1.3,
    'ytick.minor.size': 1.3,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'text.color': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 3,
})

# run elo ratings simulation
rating = melo.Rating(mode='spread', database='elo.db')

plot_functions = {}


def plot(f):
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()

    plot_functions[f.__name__] = wrapper

    return wrapper


def finish(despine=True, remove_ticks=False, pad=0.1,
           h_pad=None, w_pad=None, rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)


def set_loc(ax, xy=None, nbins=5, steps=[1, 2, 3, 4, 5, 10],
            prune=None, minor=0):
    if xy == 'x':
        axes = ax.xaxis,
    elif xy == 'y':
        axes = ax.yaxis,
    else:
        axes = ax.xaxis, ax.yaxis

    for axis in axes:
        axis.set_major_locator(
            ticker.MaxNLocator(nbins=nbins, steps=steps, prune=prune)
        )
        if minor:
            axis.set_minor_locator(ticker.AutoMinorLocator(minor))


@plot
def spread_frequency():
    """
    Frequency of NFL spreads (margin of victory) since 2009

    """
    figsize = (columnwidth, aspect*columnwidth)
    fig = plt.figure(figsize=figsize)
    plt.hist(rating.game_points(), bins=rating.bins)

    plt.xlabel('Spread [pts]')
    plt.ylabel('Counts [games]')
    plt.title('Frequency of NFL spreads')
    plt.annotate(r'2009-present', xy=(.9, .9),
                 xycoords='axes fraction', ha='right', va='top')

    finish()


@plot
def home_field():
    """
    Frequency of NFL spreads (margin of victory) since 2009

    """
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)

    q = nfldb.Query(rating.nfldb)
    q.game(season_type='Regular', finished=True)

    model_spreads = []

    # loop over all historical games
    for game in sorted(
            q.as_games(),
            key=lambda g: melo.Date(g.season_year, g.week)
            ):

        year = game.season_year
        week = game.week
        home = game.home_team
        away = game.away_team

        # allow for two season burn-in
        if year > 2010:
            for rand in np.random.rand(100):
                spread = rating.predict_spread(
                        home, away, year, week, perc=rand
                        )
                model_spreads.append(spread)

    def hfa_ratio(spreads):
        negated_spreads = [-s for s in spreads]
        signal, edges = np.histogram(
                spreads,
                bins=rating.bins,
                density=True
                )

        background, edges = np.histogram(
                spreads + negated_spreads,
                bins=rating.bins,
                density=True
                )

        middles = 0.5*(edges[1:] + edges[:-1])
        TINY = 1e-12
        ratio = signal/(background + TINY)

        return middles, ratio

    # plot game spreads
    middles, ratio = hfa_ratio(rating.game_points())
    plt.plot(middles, ratio, label='NFL')

    # plot model spreads
    middles, ratio = hfa_ratio(model_spreads)
    plt.plot(middles, ratio, label='Model')

    plt.xlabel('spread [points]')
    plt.ylabel(r'$P(\mathrm{spread})/P(\pm\mathrm{spread})$')
    plt.annotate(r'spread = home - away', xy=(.5, .1),
                 xycoords='axes fraction', ha='center')

    plt.legend(loc=9)

    finish()


@plot
def win_rate(nsample=10**4):
    # figure dimensions
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)

    rating = melo.Rating(kfactor=2)
    spreads = skellam.rvs(16, 10, size=nsample)

    # loop over different handicap margins
    for hcap in np.arange(0, 15, 3):

        # home team true win rate
        win_rate = np.heaviside(spreads - hcap, 0).mean()

        # initialize elo ratings
        arg = max(1/win_rate - 1, 1e-6)
        elo_diff = -200*np.log10(arg)
        home_elo = 1500. + elo_diff
        away_elo = 1500. - elo_diff
        win_prob = []

        # simulate a ficticious season
        for spread in spreads:
            elo_diff = home_elo - away_elo
            bounty = rating.elo_change(elo_diff, spread, hcap)
            home_elo += bounty
            away_elo -= bounty
            pwin = rating.win_prob(home_elo - away_elo)
            win_prob.append(pwin)

        # plot model
        plt.step(range(nsample), win_prob, color=plt.cm.Blues(.5))
        plt.plot((0, nsample), (win_rate, win_rate),
                 color='#333333', dashes=(4, 1))
        plt.annotate('{} pts'.format(hcap), xycoords='data',
                     xy=(10500, win_rate), ha='left', va='center',
                     color=offblack, fontsize=textiny, clip_on=False)

    # figure labels
    plt.xlabel("Updates [games]")
    plt.ylabel("Win fraction")
    plt.xlim(0, 11000)
    plt.ylim(0, 1)
    plt.title("Handicapped win probability")
    finish(rect=(0, 0, .94, 1))


def elo_history(team, handicap):
    """
    Plot the ELO rating history for a given team with a
    specified margin of victory handicap.

    """
    # convert (year, week) into a single date number
    def date(game):
        return game.season_year + game.week/float(17.)

    # query database for game dates
    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular', finished=True, team=team)
    games = sorted(q.as_games(), key=lambda g: date(g))

    # unpack historical elo ratings
    rtg_history = [
            (date(game),
             rating.elo(
                team,
                handicap,
                game.season_year,
                game.week
                ))
            for game in games
            ]

    # return "handicapped" elo rating history
    rtg_hcap = [(date, rtg) for date, rtg in rtg_history]
    return rtg_hcap


@plot
def team_history():
    fig, axes = plt.subplots(
            nrows=8, ncols=4,
            sharex=True, sharey=True,
            figsize=(textwidth, .95*textheight)
            )

    # query database for game dates
    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular', finished=True)
    teams = set(g.home_team for g in q.as_games())

    # point values
    spreads = [r for r in rating.range[::5] if r >= 0]

    for ax, team in zip(axes.flat, sorted(teams)):
        for hcap in spreads:

            rtg_hcap = elo_history(team, hcap)
            color = plt.cm.coolwarm(hcap/max(spreads))
            ax.step(*zip(*rtg_hcap), label=team, color=color, lw=.7)

            if ax.is_last_row():
                ax.set_xlabel("Year")
                ax.set_xticks([2010, 2012, 2014, 2016])
            if ax.is_first_col():
                ax.set_ylabel("Elo rating")

            title = ax.set_title(team, va='top')
            title.set_position([.5, .95])

    finish()


@plot
def example_distribution():
    # create figure object
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)
    ax = plt.gca()
    ax.grid(color='.9', zorder=0)

    spreads, cdf = rating.cdf('CLE', 'PIT', 2017, 1)
    plt.step(spreads, cdf)

    median = rating.predict_spread('CLE', 'PIT', 2017, 1)
    plt.scatter(median, 0.5, color=orange, zorder=3)
    plt.plot((median, median), (0, 0.5), color=orange, zorder=3)

    plt.xlim(-40, 40)
    plt.ylim(0, 1)

    plt.xlabel("home - away [points]")
    plt.ylabel("Prob(home - away > x)")
    plt.title("CLE vs PIT")

    finish()


@plot
def spreads(year=2017, week=2):
    # create figure object
    figsize = (textwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)
    ax = plt.gca()
    ax.grid(color='.9', zorder=0)

    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular', season_year=year, week=week)

    # loop over games in the week
    for shift, game in enumerate(q.as_games(), start=1):

        home, away = (game.home_team, game.away_team)

        median = rating.predict_spread(home, away, year, week)
        integer_median = int(round(median))

        box1, box2 = [
                rating.predict_spread(home, away, year, week, perc=p)
                for p in (.25, .75)
                ]

        box_lo, box_hi = (min(box1, box2), max(box1, box2))

        line1, line2 = [
                rating.predict_spread(home, away, year, week, perc=p)
                for p in (.05, .95)
                ]

        line_lo, line_hi = (min(line1, line2), max(line1, line2))

        box = patches.Rectangle(
                (shift-.15, box_lo), 0.3, box_hi - box_lo,
                color=blue, alpha=.8, lw=0, zorder=2
                )

        ax.add_patch(box)
        plt.plot((shift, shift), (line_lo, box_lo),
                 color=blue, alpha=.8, lw=1.2)
        plt.plot((shift, shift), (box_hi, line_hi),
                 color=blue, alpha=.8, lw=1.2)
        plt.plot((shift-.15, shift+.15), (median, median),
                 color=orange, lw=1.2)

        plt.annotate(home, xy=(shift, 37), xycoords='data',
                     ha='center', va='center', clip_on=False)
        plt.annotate(away, xy=(shift, -37), xycoords='data',
                     ha='center', va='center', clip_on=False)
        plt.annotate(integer_median, xy=(shift+.4, median),
                     xycoords='data', ha='center', va='center',
                     fontsize=9, clip_on=False)

    ax.spines['bottom'].set_visible(False)

    plt.xlim(0, 17)
    plt.ylim(-37, 37)

    plt.xticks([])
    plt.ylabel('home ${-}$ away [points]')

    finish(pad=1)


@plot
def validate():
    figsize = (textwidth, .5*textwidth)
    fig, (ax1, ax2) = plt.subplots(
            ncols=2, figsize=figsize, sharey=True
            )

    q = nfldb.Query(rating.nfldb)
    q.game(season_type='Regular', finished=True)

    spreads = rating.game_points()

    model = []
    control = []

    for game in q.as_games():
        year, week = (game.season_year, game.week)
        home, away = (game.home_team, game.away_team)

        spread = rating.points(game)
        if abs(spread) > 40:
            continue

        while True:
            random_spread = np.random.choice(spreads)
            if abs(random_spread) < 40:
                break

        cdf = dict(zip(*rating.cdf(home, away, year, week)))

        model.append(cdf[spread])
        control.append(cdf[random_spread])

    _, (_, _, R_model) = probplot(model, dist='uniform', plot=ax1)
    _, (_, _, R_control) = probplot(control, dist='uniform', plot=ax2)

    ax1.annotate('R={}'.format(R_model), xy=(.9, .1),
            xycoords='axes fraction', ha='right')

    ax2.annotate('R={}'.format(R_control), xy=(.9, .1),
            xycoords='axes fraction', ha='right')

    ax1.set_title('Model predictions')
    ax2.set_title('Random model samples')

    finish(h_pad=1)

@plot
def mean_abs_error():
    """
    Compare mean absolute error of model predictions to
    Vegas spread predictions

    """
    figsize = (columnwidth, aspect*columnwidth)
    fig = plt.figure(figsize=figsize)

    files = Path('data').glob('*.csv')
    rating = melo.Rating()

    baseline = np.abs(rating.game_points()).mean()
    plt.axhline(baseline, color=offblack, dashes=(4, 2))

    def error(game):
        home = game['Home Score']
        away = game['Visitor Score']
        line = game['Line']
        return float(home) - float(away) - float(line)

    for fname in files:
        with fname.open() as f:
            history = csv.DictReader(f)
            mean_abs_error = np.abs([
                error(game) for game in history
            ]).mean()
            year = float(re.findall(r'nfl(.*?)lines', fname.stem).pop())
            plt.scatter(year, mean_abs_error, color=blue)

    for year in range(2010, 2018):
        residuals = rating.model_accuracy(year=year)
        plt.scatter(year, np.abs(residuals).mean(), color=orange)

    plt.xlabel('Season year')
    plt.ylabel(r'$\langle |\mathrm{pred} - \mathrm{obs}| \rangle$ [points]')

    plt.ylim(8, 14)
    finish()

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
