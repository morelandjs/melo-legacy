#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import argparse
import csv
import re
from pathlib import Path

import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
from matplotlib import ticker
from scipy.stats import skellam

import melo
import nfldb


# figure size
aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textheight = 672/resolution
textiny, texsmall, texnormal = 8.0, 9.25, 10.0

# html colors
black = '#000000'
gray = '#e0e0e0'
blue = '#4a98c9'
green = '#4bb062'
dgreen = '#138D75'
orange = '#ff7f0e'
purple = '#d8412f'

# plot properties
plt.rcParams.update({
    'font.family': 'serif',
    'font.serif': ['CMU Serif'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'serif',
    'mathtext.it': 'serif:italic',
    'mathtext.cal': 'serif',
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .9,
    'lines.markersize': 3,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'xtick.major.width': .5,
    'ytick.major.width': .5,
    'xtick.minor.width': .5,
    'ytick.minor.width': .5,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.minor.size': 1.3,
    'ytick.minor.size': 1.3,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'text.color': black,
    'axes.labelcolor': black,
    'xtick.color': black,
    'ytick.color': black,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 3,
})

# run elo ratings simulation
rating = melo.Rating(mode='spread', database='elo.db')

plot_functions = {}


def plot(f):
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()

    plot_functions[f.__name__] = wrapper

    return wrapper


def finish(despine=True, remove_ticks=False, pad=0.1,
           h_pad=None, w_pad=None, rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)


def set_loc(ax, xy=None, nbins=5, steps=[1, 2, 3, 4, 5, 10],
            prune=None, minor=0):
    if xy == 'x':
        axes = ax.xaxis,
    elif xy == 'y':
        axes = ax.yaxis,
    else:
        axes = ax.xaxis, ax.yaxis

    for axis in axes:
        axis.set_major_locator(
            ticker.MaxNLocator(nbins=nbins, steps=steps, prune=prune)
        )
        if minor:
            axis.set_minor_locator(ticker.AutoMinorLocator(minor))


@plot
def spread_frequency():
    """
    Frequency of NFL spreads (margin of victory) since 2009

    """
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)
    plt.hist(rating.game_points, bins=rating.hcaps)

    plt.xlabel('Spread [pts]')
    plt.ylabel('Counts [games]')
    plt.title('Frequency of NFL spreads')
    plt.annotate(r'2009-present', xy=(.9, .9),
                 xycoords='axes fraction', ha='right', va='top')

    finish()


@plot
def model_vs_data():
    """
    Histogram model against data

    """
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)
    plt.hist(rating.game_points, bins=rating.hcaps)

    q = nfldb.Query(rating.nfldb)
    q.game(season_type='Regular', finished=True)

    model_spreads = [
            rating.predict_spread(
                g.home_team, g.away_team,
                g.season_year, g.week,
                perc=np.random.rand()
                ) for g in q.as_games()
            ]

    plt.hist(model_spreads, bins=rating.hcaps, histtype='step')
    finish()


@plot
def home_field():
    """
    Frequency of NFL spreads (margin of victory) since 2009

    """
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)

    plt.axhline(1, color=black, dashes=(4, 2), lw=.5)

    q = nfldb.Query(rating.nfldb)
    q.game(season_type='Regular', finished=True)

    model_spreads = []

    # loop over all historical games
    for game in sorted(
            q.as_games(),
            key=lambda g: melo.Date(g.season_year, g.week)
            ):

        year = game.season_year
        week = game.week
        home = game.home_team
        away = game.away_team

        # allow for two season burn-in
        if year > 2010:
            for rand in np.random.rand(100):
                spread = rating.predict_spread(
                        home, away, year, week, perc=rand
                        )
                model_spreads.append(spread)

    def hfa_ratio(spreads):
        negated_spreads = [-s for s in spreads]
        signal, edges = np.histogram(
                spreads,
                bins=rating.hcaps,
                density=True
                )

        background, edges = np.histogram(
                spreads + negated_spreads,
                bins=rating.hcaps,
                density=True
                )

        middles = 0.5*(edges[1:] + edges[:-1])
        TINY = 1e-12
        ratio = signal/(background + TINY)

        return middles, ratio

    # plot game spreads
    middles, ratio = hfa_ratio(rating.game_points)
    plt.plot(middles, ratio, label='NFL')

    # plot model spreads
    middles, ratio = hfa_ratio(model_spreads)
    plt.plot(middles, ratio, label='Model')

    plt.xlabel('spread [points]')
    plt.ylabel(r'$P(\mathrm{spread})/P(\pm\mathrm{spread})$')
    plt.annotate(r'spread = home $-$ away', xy=(.5, .1),
                 xycoords='axes fraction', ha='center')

    plt.legend(loc=9, ncol=2)

    finish()


@plot
def toy_model(size=5*10**6):
    """
    Construct a toy-model to demonstrate that the Elo ratings converge to
    the true win probability in the relevant limit.

    """
    # figure dimensions
    figsize = (columnwidth, aspect*columnwidth) 
    fig, ax = plt.subplots(figsize=figsize)

    # initialize rating class object
    rating = melo.Rating(mode='spread', kfactor=.01, hfa=0, smooth=0)

    # Poisson random variable lambda values
    teams = [11, 13, 15, 17, 19, 21, 23, 25, 27]
    opp = 19.01

    # Elo ratings dictionary
    rtg = {}

    # useful constant
    TINY = 1e-6
    
    # loop over weeks
    for week in range(size):

        # loop over matches (pairs of teams)
        for (home, away) in np.random.choice(
                teams + [opp], size=(5, 2), replace=False):

            # sample game scores
            home_pts, away_pts = [
                    np.random.poisson(lam=lam)
                    for lam in (home, away)
                    ]

            # read Elo ratings
            try:
                home_elo = rtg[home][-1]
                away_elo = rtg[away][-1]
            except KeyError:
                home_elo = 1500.
                away_elo = 1500.

            # update Elo ratings
            points = home_pts - away_pts
            elo_diff = home_elo - away_elo
            bounty = rating.elo_change(elo_diff, points, 0)

            home_elo += bounty
            away_elo -= bounty

            try:
                rtg[home].append(home_elo)
                rtg[away].append(away_elo)
            except KeyError:
                rtg[home] = [home_elo]
                rtg[away] = [away_elo]

    # plot each team's expected win rate against reference team
    for team in teams:

        # Elo projected win probability
        team_rtg, opp_rtg = [np.array(rtg[a]) for a in (team, opp)]
        pwin = rating.win_prob(team_rtg - opp_rtg)
        plt.plot(np.arange(size), pwin, zorder=0, label='Elo model',
                color=blue)

        # True win probability
        nsamples = 10**7
        team_pts, opp_pts = [
                np.random.poisson(lam=lam, size=nsamples)
                for lam in (team, opp)
                ]

        eps = np.random.uniform(-TINY, TINY, size=nsamples)
        ptrue = np.mean(team_pts - opp_pts + eps > 0)
        plt.plot((0, size), (ptrue, ptrue), color=black, dashes=(4, 2),
                label='Exact')

        # Team labels
        label = "{}".format(team)

        ax.annotate(
                label, xy=(1.07*size, ptrue), xycoords='data', ha='right',
                va='center', annotation_clip=False, fontsize=texsmall
                )

    plt.annotate(
            r'$\lambda_\mathrm{team}:\!$', xy=(1.07*size, 0.98), xycoords='data',
            ha='right', va='center', annotation_clip=False, fontsize=texsmall
            )

    # figure properties
    plt.xlim(0, 1.06*size)
    plt.ylim(0, 1)

    # use scientific notation for x-labels
    xaxis = ax.get_xaxis()
    xaxis.get_major_formatter().set_powerlimits((0, 0))

    # labels
    plt.xlabel('Updates [games]')
    plt.ylabel(r'$P_\mathrm{win}(\lambda_\mathrm{team}, \lambda_\mathrm{opp})$')

    handles, labels = ax.get_legend_handles_labels()
    plt.legend(handles[:2], labels[:2], ncol=2, bbox_to_anchor=(.5, .98),
            loc=10, fontsize=texsmall)
    
    finish()


@plot
def win_rate(nsample=10**4):
    """
    Win rate calculated for a Poisson toy model

    """
    # figure dimensions
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)

    rating = melo.Rating(kfactor=2, smooth=0)
    spreads = skellam.rvs(16, 10, size=nsample)

    # loop over different handicap margins
    for hcap in np.arange(0, 15, 3):

        # home team true win rate
        win_rate = np.mean(spreads - hcap > 0)

        # initialize elo ratings
        arg = max(1/win_rate - 1, 1e-6)
        elo_diff = -200*np.log10(arg)
        home_elo = 1500.
        away_elo = 1500.
        win_prob = []

        # simulate a ficticious season
        for spread in spreads:
            elo_diff = home_elo - away_elo
            bounty = rating.elo_change(elo_diff, spread, hcap)
            home_elo += bounty
            away_elo -= bounty
            pwin = rating.win_prob(home_elo - away_elo)
            win_prob.append(pwin)

        # plot model
        plt.step(range(nsample), win_prob, color=blue)
        plt.plot((0, nsample), (win_rate, win_rate),
                 color=black, dashes=(4, 1))
        plt.annotate('{} pts'.format(hcap), xycoords='data',
                     xy=(10500, win_rate), ha='left', va='center',
                     color=black, fontsize=textiny, clip_on=False)

    # figure labels
    plt.xlabel("Updates [games]")
    plt.ylabel("Win fraction")
    plt.xlim(0, 11000)
    plt.ylim(0, 1)
    plt.title("Handicapped win probability")
    finish(rect=(0, 0, .94, 1))


def elo_history(team, handicap):
    """
    Plot the ELO rating history for a given team with a
    specified margin of victory handicap.

    """
    # convert (year, week) into a single date number
    def date(game):
        return game.season_year + game.week/float(17.)

    # query database for game dates
    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular', finished=True, team=team)
    games = sorted(q.as_games(), key=lambda g: date(g))

    # unpack historical elo ratings
    rtg_history = [
            (date(game),
             rating.elo(
                team,
                handicap,
                game.season_year,
                game.week
                ))
            for game in games
            ]

    # return "handicapped" elo rating history
    rtg_hcap = [(date, rtg) for date, rtg in rtg_history]
    return rtg_hcap


@plot
def team_history():
    """
    Margin-dependent Elo rating for all teams since 2009

    """
    fig, axes = plt.subplots(
            nrows=8, ncols=4,
            sharex=True, sharey=True,
            figsize=(textwidth, .95*textheight)
            )

    # query database for game dates
    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular', finished=True)
    teams = set(g.home_team for g in q.as_games())

    # point values
    spreads = [r for r in rating.hcaps[::5] if r >= 0]

    for ax, team in zip(axes.flat, sorted(teams)):
        for hcap in spreads:

            rtg_hcap = elo_history(team, hcap)
            color = plt.cm.coolwarm(hcap/max(spreads))
            ax.step(*zip(*rtg_hcap), label=team, color=color, lw=.7)

            if ax.is_last_row():
                ax.set_xlabel("Year")
                ax.set_xticks([2010, 2012, 2014, 2016])
            if ax.is_first_col():
                ax.set_ylabel("Elo rating")

            title = ax.set_title(team, va='top')
            title.set_position([.5, .95])

    finish()


@plot
def example_distribution():
    """
    Simple example CDF point spread distribution

    """
    # create figure object
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)
    ax = plt.gca()
    ax.grid(color=gray, zorder=0)

    spreads, cdf = [
            np.array(d)
            for d in rating.cdf('CLE', 'PIT', 2017, 1)
            ]
    cut = (-40 <= spreads) & (spreads <= 40)
    plt.step(spreads[cut], cdf[cut], clip_on=False)

    median = rating.predict_spread('CLE', 'PIT', 2017, 1)
    plt.scatter(median, 0.5, color=orange, zorder=3)
    plt.plot((median, median), (0, 0.5), color=orange, zorder=3)

    plt.xlim(-40, 40)
    plt.ylim(0, 1)

    plt.xlabel("home - away [points]")
    plt.ylabel("Prob(home - away > x)")
    plt.title("CLE vs PIT")

    finish()


@plot
def predict(year=2017, week=2):
    """
    Example game point spread and point total predictions

    """
    # create figure object
    figsize = (textwidth, 2*aspect*columnwidth)
    fig, axes = plt.subplots(nrows=2, figsize=figsize)

    modes = 'spread', 'total'
    ylabels = r'home $-$ away [points]', r'home $+$ away [points]'
    yticks = np.linspace(-30, 30, 7), np.linspace(15, 75, 7)
    ylims = (-30, 30), (15, 75)
    colors = blue, green

    # top plot: spreads, bottom plot: totals
    for ax, mode, ylabel, ytick, ylim, color in zip(
            axes, modes, ylabels, yticks, ylims, colors):

        # run elo ratings simulation
        rating = melo.Rating(mode=mode, database='elo.db')

        q = nfldb.Query(nfldb.connect())
        q.game(season_type='Regular', season_year=year, week=week)

        # loop over games in the week
        for shift, game in enumerate(q.as_games(), start=1):

            home, away = (game.home_team, game.away_team)

            median = rating.predict_spread(home, away, year, week)
            integer_median = int(round(median))

            box1, box2 = [
                    rating.predict_spread(home, away, year, week, perc=p)
                    for p in (.25, .75)
                    ]

            box_lo, box_hi = (min(box1, box2), max(box1, box2))

            line1, line2 = [
                    rating.predict_spread(home, away, year, week, perc=p)
                    for p in (.05, .95)
                    ]

            line_lo, line_hi = (min(line1, line2), max(line1, line2))

            box = patches.Rectangle(
                    (shift-.15, box_lo), 0.3, box_hi - box_lo,
                    color=color, alpha=.8, lw=0, zorder=2
                    )

            ax.add_patch(box)
            ax.plot((shift, shift), (line_lo, box_lo), color=color,
                    alpha=.8, lw=1.2)
            ax.plot((shift, shift), (box_hi, line_hi), color=color,
                    alpha=.8, lw=1.2)
            ax.plot((shift-.13, shift+.13), (median, median),
                    color=black, lw=1.3)

            ax.annotate(integer_median, xy=(shift+.4, median),
                        xycoords='data', ha='center', va='center',
                        fontsize=9, clip_on=False)

            ymin, ymax = (min(ylim) - 5, max(ylim) + 5)
            ax.annotate(home, xy=(shift, ymax), xycoords='data',
                        ha='center', va='center', annotation_clip=False)
            ax.annotate(away, xy=(shift, ymin), xycoords='data',
                        ha='center', va='center', annotation_clip=False)

        for lbl, y in ('H:', ymax), ('A:', ymin):
            ax.annotate(lbl, xy=(0, y), va='center', xycoords='data',
                        annotation_clip=False)

        ax.grid(color=gray, zorder=0)
        ax.spines['bottom'].set_visible(False)

        ax.set_xlim(0, 17)
        ax.set_ylim(*ylim)

        ax.set_xticks([])
        ax.set_yticks(ytick)
        ax.set_ylabel(ylabel, fontsize=9)

    finish(h_pad=5, rect=(0, .05, 1, .95))


@plot
def percentiles():
    """
    Comparison of predicted and observed percentiles.

    """
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)

    q = nfldb.Query(rating.nfldb)
    q.game(season_type='Regular', finished=True)

    model = []
    broken = []

    for game in q.as_games():
        year, week = (game.season_year, game.week)
        home, away = (game.home_team, game.away_team)

        spread = rating.points(game)
        random_spread = np.random.choice(rating.game_points)

        model_perc, broken_perc = [
                np.interp(s, *rating.cdf(home, away, year, week))
                for s in (spread, random_spread)
                ]

        model.append(model_perc)
        broken.append(broken_perc)

    N = len(model)
    uniform = np.linspace(0, 1, N)

    brk, mdl, ref = ('Broken Model', 'Model', '95% CI')
    plt.plot(uniform, np.sort(broken) - uniform, color=dgreen, label=brk)
    plt.plot(uniform, np.sort(model) - uniform, color=purple, label=mdl)
    plt.axhline(0, color=black, dashes=(4, 2))
    
    M = 10**4
    rand = np.random.uniform(size=(M, N))
    true = np.sort(rand, axis=1) - uniform[np.newaxis, :]

    indices = [int(cut*M) for cut in (.025, .975)]
    true_min, true_max = [np.sort(true, axis=0)[i] for i in indices]
    plt.fill_between(uniform, true_min, true_max, color=gray,
            lw=0, label=ref)

    plt.title('')
    plt.xlabel('Percentile')
    plt.ylabel('Percentile Error')
    plt.ylim(-0.06, 0.06)
    plt.legend(handlelength=1, markerscale=1.8,
            bbox_to_anchor=(0.025, 1.1), loc=2)

    finish()


@plot
def mean_abs_error():
    """
    Compare mean absolute error of model predictions to
    Vegas spread predictions

    """
    figsize = (columnwidth, aspect*columnwidth)
    plt.figure(figsize=figsize)

    files = Path('data').glob('*.csv')
    rating = melo.Rating()

    baseline = np.abs(rating.game_points).mean()
    plt.axhline(baseline, color=black, dashes=(4, 2))

    def error(game):
        home = game['Home Score']
        away = game['Visitor Score']
        line = game['Line']
        return float(home) - float(away) - float(line)

    for fname in files:
        with fname.open() as f:
            history = csv.DictReader(f)
            mean_abs_error = np.abs([
                error(game) for game in history
            ]).mean()
            year = float(re.findall(r'nfl(.*?)lines', fname.stem).pop())
            data = plt.scatter(year, mean_abs_error, color=blue)

    for year in range(2010, 2018):
        residuals = rating.model_accuracy(year=year)
        model = plt.scatter(year, np.abs(residuals).mean(), color=orange)

    plt.xlabel('Season year')
    plt.ylabel(r'$\langle|\mathrm{pred} - \mathrm{obs}|\rangle$ [points]')
    plt.ylim(8, 12)

    handles, labels = plt.gca().get_legend_handles_labels()
    plt.legend([data, model], ['Vegas', 'Model'])

    finish()


@plot
def ratings(year=2017, week=12):
    """
    Offensive and deffensive power ratings for each team

    """
    figsize = (columnwidth, columnwidth)
    plt.figure(figsize=figsize)

    q = nfldb.Query(nfldb.connect())
    q.game(season_type='Regular', season_year=year, week=week)

    spread_rtg, total_rtg = [
            melo.Rating(mode=mode, database='elo.db')
            for mode in ('spread', 'total')
            ]

    spreads, totals = [[
        rtg.predict_score(team, 'AVG', year, week) for team in rtg.teams
        ] for rtg in (spread_rtg, total_rtg)
        ]

    smin, smax = min(spreads), max(spreads)
    colors = [plt.cm.coolwarm((s - smin)/(smax - smin)) for s in spreads]

    for team, spread, total, color in zip(
            spread_rtg.teams, spreads, totals, colors):

        offense = 0.5*(total + spread)
        defense = 0.5*(total - spread)

        bump = .05
        plt.scatter(defense, offense, c=color, s=15,
                    edgecolor=black, linewidth=.4, zorder=99)
        plt.annotate(team, xy=(defense - bump, offense + bump),
                     xycoords='data', ha='left')

    ax = plt.gca()

    for axis in ax.xaxis, ax.yaxis:
        loc = ticker.MultipleLocator(base=1)
        axis.set_major_locator(loc)

    ax.grid(True, which='both')
    ax.grid(color=gray, zorder=0)
    ax.invert_xaxis()

    plt.xlim(29, 17)
    plt.ylim(17, 29)
    plt.xlabel('Points Allowed')
    plt.ylabel('Points Scored')
    plt.title('Season {}, Week {}'.format(year, week))
    finish(pad=.5)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.pdf'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
