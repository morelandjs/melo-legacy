#!/usr/bin/env python2

import argparse

import matplotlib.pyplot as plt
import numpy as np

import elo
import nfldb


# figure size
aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8.0, 9.25, 10.0
offblack = '#262626'

# figure style
plt.style.use('fivethirtyeight')

plt.rcParams.update({
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'font.weight': 400,
    'axes.labelweight': 400,
    'axes.titleweight': 400,
    'lines.linewidth': .9,
    'lines.markersize': 3,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .9,
    'axes.linewidth': .5,
    'xtick.major.width': .5,
    'ytick.major.width': .5,
    'xtick.minor.width': .5,
    'ytick.minor.width': .5,
    'xtick.major.size': 2,
    'ytick.major.size': 2,
    'xtick.minor.size': 1.3,
    'ytick.minor.size': 1.3,
    'xtick.major.pad': 1.8,
    'ytick.major.pad': 1.8,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'image.interpolation': 'none',
    'pdf.fonttype': 3,
})

# run elo ratings simulation
rating = elo.Rating(database='elo.db')

plot_functions = {}

def plot(f):
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.png'.format(f.__name__), dpi=192)
        plt.close()

    plot_functions[f.__name__] = wrapper

    return wrapper

def finish(despine=True, remove_ticks=False, pad=0.1,
        h_pad=None, w_pad=None, rect=[0, 0, 1, 1]):
    fig = plt.gcf()

    for ax in fig.axes:
        if despine:
            for spine in 'top', 'right':
                ax.spines[spine].set_visible(False)

        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)

@plot
def spread_frequency():
    """
    Frequency of NFL spreads (margin of victory) since 2009

    """
    spreads = rating.spreads()
    bins = np.arange(-0.5, 41.5)

    plt.hist(spreads, bins=bins)
    plt.xlabel('Spread [pts]')
    plt.ylabel('Counts [games]')
    plt.title('Frequency of NFL spreads')
    plt.annotate(r'2009-present', xy=(.9, .9),
            xycoords='axes fraction', ha='right', va='top')
    finish()

@plot
def weekly_spreads(year=2016, week=17):
    """
    Calculate the 50-50 betting point-spread for each team.

    """
    fig, axes = plt.subplots(
            nrows=4, ncols=4,
            sharex=True, sharey=True,
            figsize=(textwidth, textwidth),
            )

    q = nfldb.Query(nfldb.connect())
    q.game(season_year=year, week=week, season_type='Regular')

    for game, ax in zip(q.as_games(), axes.flat):
        home = game.home_team
        away = game.away_team

        cdf = rating.cdf(home, away, year, week)
        spread, prob = zip(*cdf)
        ax.step(spread, prob)

        if ax.is_first_col():
            ax.set_yticks([0, 0.2, 0.4, 0.6, 0.8, 1])
            ax.set_ylim(0, 1)

        if ax.is_last_row():
            xticks = [-20, -10, 0, 10, 20]
            ax.set_xticks(xticks)
            ax.set_xlim(-20, 20)

        for axis in (ax.xaxis.get_major_ticks(),
                ax.yaxis.get_major_ticks()):
            for tic in axis:
                tic.tick1On = tic.tick2On = False

        for loc in 'bottom', 'left':
            ax.spines[loc].set_color(offblack)
            ax.spines[loc].set_linewidth(1)

        for loc in 'top', 'right':
            ax.spines[loc].set_color(None)

        ax.grid(which='major', linewidth=1, clip_on=False)
        ax.patch.set_facecolor('0.94')

        ax.annotate('{}@{}'.format(away, home), xy=(0.01,0.01),
                ha='left', va='bottom', xycoords='axes fraction')


    fig.patch.set_facecolor('white')
    fig.text(0.5, 0.0, r'home $-$ away [points]',
            ha='center', va='bottom')
    fig.text(0.01, 0.5, r'Prob(home $-$ away > x)',
            ha='center', va='center', rotation=90)
    fig.tight_layout(w_pad=0.4, h_pad=0.4, pad=2) 


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('plots', nargs='*')
    args = parser.parse_args()

    if args.plots:
        for i in args.plots:
            if i.endswith('.png'):
                i = i[:-4]
            if i in plot_functions:
                plot_functions[i]()
            else:
                print('unknown plot:', i)
    else:
        for f in plot_functions.values():
            f()


if __name__ == "__main__":
    main()
